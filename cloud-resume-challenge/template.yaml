AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  cloud-resume-challenge
  
  Sample SAM Template for cloud-resume-challenge

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5

Parameters:
  HostedZoneParameter:
    Type: String
    Description: The hosted zone for the Route53 records
    Default: Z08034563UEGXHOK8DP5Y
  DomainNameParameter:
    Type: String
    Description: The domain name of the site
    Default: oliverbennett.net
  ApiDomainNameParameter:
    Type: String
    Description: The subdomain of the API
    Default: "api."
  WebsiteDomainNameParameter:
    Type: String
    Description: The subdomain of the API
    Default: "website."

Resources:

  MyWebsite:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - HEAD
          AllowedOrigins:
            - "*"
          ExposedHeaders:
            - Date
          Id: myCORSRuleId
          MaxAge: 3600
      AccessControl: PublicRead
      # add corsconfiguration? https://github.com/aws-samples/aws-serverless-workshop-innovator-island/blob/7a995e2d214021d7b98c96829ebdcdd858ca7173/1-app-deploy/sam-app/template.yaml#L81
      WebsiteConfiguration:
        IndexDocument: index.html
      BucketName: cloud-resume-challenge-website

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloud-resume-challenge
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ID"
          KeyType: "HASH"
    
  MyRoute53Record:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId:
        Ref: HostedZoneParameter
      RecordSets:
        - Name: !Join ["", [!Ref WebsiteDomainNameParameter, !Ref DomainNameParameter]]
          Type: "A"
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt MyDistribution.DomainName
  MyCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join ["", ["*.", !Ref DomainNameParameter]]
      SubjectAlternativeNames:
        - !Ref DomainNameParameter
        - !Join ["", ["*.", !Ref DomainNameParameter]]
      DomainValidationOptions:
        - DomainName: !Ref DomainNameParameter
          HostedZoneId:
            Ref: HostedZoneParameter
      ValidationMethod: DNS

  MyDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        ViewerCertificate:
            AcmCertificateArn: !Ref MyCertificate
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1
        Aliases: !Split [",", !Join ["", [!Ref WebsiteDomainNameParameter, !Ref DomainNameParameter],],]
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: cloud-resume-challenge-website.s3-website-us-east-1.amazonaws.com
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin

        Origins:
          - DomainName: cloud-resume-challenge-website.s3-website-us-east-1.amazonaws.com
            Id: cloud-resume-challenge-website.s3-website-us-east-1.amazonaws.com
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              HTTPPort: 80
              HTTPSPort: 443
        Enabled: true
        DefaultRootObject: index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join ["", ["arn:aws:s3:::", !Ref MyWebsite, "/*"]]
      Bucket: !Ref MyWebsite
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Domain:
        DomainName: !Join ["", [!Ref ApiDomainNameParameter, !Ref DomainNameParameter]]
        CertificateArn: !Ref MyCertificate
        Route53:
          HostedZoneId:
            Ref: HostedZoneParameter

  GetFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: cloud-resume-challenge
      CodeUri: get-function/
      Handler: get-function
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /get
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
      # Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        # Variables:
          # PARAM1: VALUE

  PutFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: cloud-resume-challenge
      CodeUri: put-function/
      Handler: put-function
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /put
            Method: GET
            RestApiId: 
              Ref: ApiGatewayApi

      
      # Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        # Variables:
          # PARAM1: VALUE

# Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # HelloWorldAPI:
  #   Description: "API Gateway endpoint URL for Prod environment for First Function"
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  # HelloWorldFunction:
  #   Description: "First Lambda Function ARN"
  #   Value: !GetAtt HelloWorldFunction.Arn
  # HelloWorldFunctionIamRole:
  #   Description: "Implicit IAM Role created for Hello World function"
  #   Value: !GetAtt HelloWorldFunctionRole.Arn

  # GetAPI:
  #   Description: "API Gateway endpoint URL for Prod environment for First Function"
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get/"
  # GetFunction:
  #   Description: "First Lambda Function ARN"
  #   Value: !GetAtt GetFunction.Arn
  # GetFunctionIamRole:
  #   Description: "Implicit IAM Role created for Hello World function"
  #   Value: !GetAtt GetFunctionRole.Arn